# Simulate macOS environment using Ubuntu with mocked macOS commands
FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install basic packages
RUN apt-get update && apt-get install -y \
    curl \
    git \
    sudo \
    zsh \
    vim \
    wget \
    gettext-base \
    ruby \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create a test user with sudo privileges
RUN useradd -m -s /bin/bash testuser && \
    echo 'testuser:testpass' | chpasswd && \
    usermod -aG sudo testuser && \
    echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Switch to test user
USER testuser
WORKDIR /home/testuser

# Create mock macOS commands to simulate Homebrew environment
RUN mkdir -p /home/testuser/.local/bin

# Create mock brew command that logs what would be installed
RUN echo '#!/bin/bash' > /home/testuser/.local/bin/brew && \
    echo 'echo "[MOCK BREW] $@" >> /tmp/brew-commands.log' >> /home/testuser/.local/bin/brew && \
    echo 'case "$1" in' >> /home/testuser/.local/bin/brew && \
    echo '    "list")' >> /home/testuser/.local/bin/brew && \
    echo '        exit 1  # Simulate packages not installed' >> /home/testuser/.local/bin/brew && \
    echo '        ;;' >> /home/testuser/.local/bin/brew && \
    echo '    "services")' >> /home/testuser/.local/bin/brew && \
    echo '        if [ "$2" = "list" ]; then' >> /home/testuser/.local/bin/brew && \
    echo '            echo "syncthing none"' >> /home/testuser/.local/bin/brew && \
    echo '        fi' >> /home/testuser/.local/bin/brew && \
    echo '        ;;' >> /home/testuser/.local/bin/brew && \
    echo '    "tap")' >> /home/testuser/.local/bin/brew && \
    echo '        echo "Tapping $2"' >> /home/testuser/.local/bin/brew && \
    echo '        ;;' >> /home/testuser/.local/bin/brew && \
    echo '    "install")' >> /home/testuser/.local/bin/brew && \
    echo '        echo "Installing: ${@:2}"' >> /home/testuser/.local/bin/brew && \
    echo '        ;;' >> /home/testuser/.local/bin/brew && \
    echo '    *)' >> /home/testuser/.local/bin/brew && \
    echo '        echo "Homebrew command: $@"' >> /home/testuser/.local/bin/brew && \
    echo '        ;;' >> /home/testuser/.local/bin/brew && \
    echo 'esac' >> /home/testuser/.local/bin/brew && \
    echo 'exit 0' >> /home/testuser/.local/bin/brew

# Create mock defaults command (macOS system preferences)
RUN echo '#!/bin/bash' > /home/testuser/.local/bin/defaults && \
    echo 'echo "[MOCK DEFAULTS] $@" >> /tmp/defaults-commands.log' >> /home/testuser/.local/bin/defaults && \
    echo 'echo "Setting default: $@"' >> /home/testuser/.local/bin/defaults && \
    echo 'exit 0' >> /home/testuser/.local/bin/defaults

# Create mock dockutil command
RUN echo '#!/bin/bash' > /home/testuser/.local/bin/dockutil && \
    echo 'echo "[MOCK DOCKUTIL] $@" >> /tmp/dockutil-commands.log' >> /home/testuser/.local/bin/dockutil && \
    echo 'echo "Dock utility: $@"' >> /home/testuser/.local/bin/dockutil && \
    echo 'exit 0' >> /home/testuser/.local/bin/dockutil

# Create mock chflags command
RUN echo '#!/bin/bash' > /home/testuser/.local/bin/chflags && \
    echo 'echo "[MOCK CHFLAGS] $@" >> /tmp/chflags-commands.log' >> /home/testuser/.local/bin/chflags && \
    echo 'echo "chflags: $@"' >> /home/testuser/.local/bin/chflags && \
    echo 'exit 0' >> /home/testuser/.local/bin/chflags

# Make mock commands executable
RUN chmod +x /home/testuser/.local/bin/*

# Add to PATH
ENV PATH="/home/testuser/.local/bin:$PATH"

# Set OSTYPE to simulate macOS
ENV OSTYPE="darwin21"

# Copy dotfiles into container
COPY --chown=testuser:testuser . /home/testuser/dotfiles

# Set environment variables for testing
ENV GIT_EMAIL_PERSONAL=test.personal@example.com
ENV GIT_EMAIL_WORK=test.work@example.com

# Set the working directory
WORKDIR /home/testuser/dotfiles

# Default command runs installation and validation
CMD ["bash", "-c", "./dotfiles-install.sh && ./integration-tests/validate.sh"]